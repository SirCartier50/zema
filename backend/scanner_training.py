# -*- coding: utf-8 -*-
"""scanner_training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18M3Gjhw9l6iRO0khPF625ws5jDp_YCoe
"""

!pip install tensorflow tensorflow-gpu opencv-python matplotlib

from google.colab import drive
drive.mount('/content/drive')

import os
import tensorflow as tf
import numpy as np
import json
import cv2
import imghdr
from matplotlib import pyplot as plt

gpus = tf.config.experimental.list_physical_devices('CPU')

#this is to limit the gpu usage
gpus = tf.config.experimental.list_physical_devices('GPU')
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)

tf.test.is_gpu_available()

"""Clean Data"""

data_dir = 'drive/MyDrive/data'
image_exts = ['jpeg', 'jpg', 'bmp', 'png']
for image_class in os.listdir(data_dir):
    for image in os.listdir(os.path.join(data_dir, image_class)):
      image_path = os.path.join(data_dir, image_class, image)
      try:
        img = cv2.imread(image_path)
        tip = imghdr.what(image_path)
        if tip not in image_exts:
          print('Image not in ext list {}'.format(image_path))
          os.remove(image_path)
      except Exception as e:
        print('Issue with image {}'.format(image_path))

"""load data"""

data = tf.keras.utils.image_dataset_from_directory('drive/MyDrive/data')
data_iterator = data.as_numpy_iterator()
batch = data_iterator.next()

"""preprocessing data"""

data = data.map(lambda x,y: (x/255, y))
data.as_numpy_iterator().next()

train_size = int(len(data)*.7)
val_size = int(len(data)*.2)
test_size = int(len(data)*.1)

train = data.take(train_size)
val = data.skip(train_size).take(val_size)
test = data.skip(train_size + val_size).take(test_size)

"""build model"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout

model = Sequential()

model.add(Conv2D(16, (3,3), 1, activation='relu', input_shape=(256,256,3)))
model.add(MaxPooling2D())
model.add(Conv2D(32, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())
model.add(Conv2D(16, (3,3), 1, activation='relu'))
model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile('adam', loss='mean_squared_error', metrics=['mae'])

"""train data"""

logdir='logs'
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)

hist = model.fit(train, epochs=20, validation_data=val, callbacks=[tensorboard_callback])

"""evaluate model"""

from tensorflow.keras.metrics import Precision, Recall, BinaryAccuracy

pre = Precision()
re = Recall()
acc = BinaryAccuracy()

for batch in test.as_numpy_iterator():
  x,y = batch
  yhat = model.predict(x)
  pre.update_state(y, yhat)
  re.update_state(y, yhat)
  acc.update_state(y, yhat)

"""test"""

img = cv2.imread('/content/Atopic-dermatitis-in-a-pizza-shop-worker.image-from-Matt-Zirwas.jpg')

#resize image first
resize = tf.image.resize(img, (256,256))

yhat = model.predict(np.expand_dims(resize/255, 0))

if yhat > 0.5:
  print(f'Predicted class is healthy')
else:
  print(f'Predicted class is eczema')

"""save model"""

from tensorflow.keras.models import load_model

model.save(os.path.join('models', 'eczemaclassifier.h5'))

#to load it
new_model = load_model(os.path.join('models', 'eczemaclassifier.h5'))

img = cv2.imread('/content/C378NKSK_1401_C_1389.jpeg')

#resize image first
resize = tf.image.resize(img, (256,256))
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.show()

yhat = new_model.predict(np.expand_dims(resize/255, 0))

if yhat > 0.5:
  print(f'Predicted class is Sad')
else:
  print(f'Predicted class is Happy')